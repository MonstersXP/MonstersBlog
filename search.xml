<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Runtime之动态添加方法]]></title>
      <url>/2017/02/21/Runtime%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul>
<li><p>动态添加的方法的作用就是去处理未实现的实例方法或者是类方法，它的调用时刻: 只要我们调用了一个不存在的方法时，它就会动态方法解析，接下来就会进入消息转发流程，这此过程中我们可以拦截然后动态的添加方法，防止程序崩溃。</p>
</li>
<li><p>如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类添加方法解决。</p>
</li>
<li><p>有没有使用performSelector，其实主要想问你有没有动态添加过方法。使用performSelector可以调用一个没有实现的方法，但是会报错。</p>
</li>
</ul>
<h2 id="动态添加方法"><a href="#动态添加方法" class="headerlink" title="动态添加方法"></a>动态添加方法</h2><p>以一个示例讲解：</p>
<p>1、 创建一个熊猫Panda类，Panda类并没有实现eat方法，可以使用performSelector调用一个没有实现的方法，但是会报错。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Panda *pan = [[Panda alloc] init];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 默认Panda，没有实现eat方法，不能直接调用，可以通过performSelector调用，但是会报错。</span></span><br><span class="line"><span class="comment">// 动态添加方法就不会报错</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 无参 *</span>/</span></span></span><br><span class="line"><span class="comment">//[pan performSelector:@selector(eat)];</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 有参 *</span>/</span></span></span><br><span class="line">[pan performSelector:<span class="meta">@selector</span>(eat:) withObject:@<span class="number">521</span>];</span><br></pre></td></tr></table></figure>
<p>2、在Panda类中添加方法（以有参为例）</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"Panda.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Panda</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认方法都有两个隐式参数，</span></span><br><span class="line"><span class="comment">// 定义添加的方法</span></span><br><span class="line"><span class="keyword">void</span> eat(<span class="keyword">id</span> <span class="keyword">self</span>, SEL sel, <span class="built_in">NSNumber</span> *meter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n%@\n%@\n%@"</span>,<span class="keyword">self</span>,<span class="built_in">NSStringFromSelector</span>(sel),meter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个对象调用未实现的方法，会调用这个方法处理,并且会把对应的方法列表传过来.</span></span><br><span class="line"><span class="comment">// 刚好可以用来判断，未实现的方法是不是我们想要动态添加的方法</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="built_in">NSSelectorFromString</span>(<span class="string">@"eat:"</span>)) &#123;</span><br><span class="line">        <span class="comment">// 动态添加eat方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第一个参数：给哪个类添加方法</span></span><br><span class="line">        <span class="comment">// 第二个参数：添加方法的方法编号</span></span><br><span class="line">        <span class="comment">// 第三个参数：添加方法的函数实现（函数地址）</span></span><br><span class="line">        <span class="comment">// 第四个参数：函数的类型，(返回值+参数类型) v:void @:对象-&gt;self :表示SEL-&gt;_cmd</span></span><br><span class="line">        class_addMethod(<span class="keyword">self</span>, sel, (IMP) eat, <span class="string">"v@:"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>一个类方法非常多，一次性加载到内存，比较耗费资源，为什么动态添加方法? OC都是懒加载，有些方法可能很久不会调用。</p>
<p>比如电商，视频，社交等一些软件会有有收费项目或者会员机制，那么只有在开通会员的时候才会拥有特定功能，然而存在相当一部门用户是没有使用收费功能，或者是没有开通开通会员的，我们就在这些用户使用时不加载这些方法（这个方法的类是要加载的），后面利用Runtime动态的添加这些方法，以达到性能最大化。</p>
<h3 id="文章链接"><a href="#文章链接" class="headerlink" title="文章链接"></a>文章链接</h3><p><a href="https://xiaopengmonsters.github.io/2017/02/14/Runtime/" target="_blank" rel="noopener">Runtime和消息转发</a></p>
<p><a href="https://xiaopengmonsters.github.io/2017/02/20/Runtime%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">Runtime之动态添加属性</a></p>
]]></content>
      
        <categories>
            
            <category> 原理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C </tag>
            
            <tag> Runtime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Runtime之动态添加属性]]></title>
      <url>/2017/02/20/Runtime%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>为什么要将Runtime的关联属性单独拿出来写一篇文章呢？ 因为单独来讲一个小知识点更加简洁，容易掌握，也是一种知识详细的梳理过程。篇幅越短读者就不容易疲劳，阅读更有效果。</p>
<p>动态添加方法在后面也会单独写一篇博文。</p>
<h2 id="给分类添加属性"><a href="#给分类添加属性" class="headerlink" title="给分类添加属性"></a>给分类添加属性</h2><ul>
<li>原理：给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到类存空间。</li>
</ul>
<p>对象关联允许开发者对已经存在的类在 Category 中添加自定义的属性：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">OBJC_EXPORT <span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key, id <span class="keyword">value</span>, objc_AssociationPolicy policy</span>) __<span class="title">OSX_AVAILABLE_STARTING</span>(<span class="params">__MAC_10_6, __IPHONE_3_1</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>参数1：object 是源对象</p>
<p>参数2：value 是被关联的对象</p>
<p>参数3：key 是关联的键，objc_getAssociatedObject 方法通过不同的 key 即可取出对应的被关联对象</p>
<p>参数4：policy 是一个枚举值，表示关联对象的行为，从命名就能看出各个枚举值的含义</p>
<p>要取出被关联的对象使用 objc_getAssociatedObject 方法即可，要删除一个被关联的对象，使用 objc_setAssociatedObject 方法将对应的 key 设置成 nil 即可.</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 这个也可以取消关联 */</span></span><br><span class="line"><span class="keyword">void</span> objc<span class="number">_</span>removeAssociatedObjects(id <span class="keyword">object</span>)</span><br></pre></td></tr></table></figure>
<h3 id="应用情景"><a href="#应用情景" class="headerlink" title="应用情景"></a>应用情景</h3><ul>
<li>给NSObject类添加一个name属性</li>
<li>给UIButton或UIView添加一个单击事件回调属性</li>
<li>给控件（UILable，UIButton，UIView等）添加一个角标显示的信息的属性，以及信息的颜色，字体大小等属性</li>
</ul>
<p>下面我们以给 UIButton 添加一个监听单击事件的 block 属性为例：</p>
<p>创建一个UIButton的分类</p>
<p>在.h文件：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^clickBlock)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIButton</span> (<span class="title">block</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在分类中声明一个属性时,只会生成setter和getter方法的声明,并不能生成setter和getter方法的</span></span><br><span class="line"><span class="comment"> * 实现以及带下划线的成员变量.</span></span><br><span class="line"><span class="comment"> * 所以, 在分类中有两种方式声明一个属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 第一种写法 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) clickBlock click;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 第二种写法 */</span></span><br><span class="line"><span class="comment">//@property clickBlock click;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在.m文件：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"UIButton+block.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 定义关联的key */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">void</span> *clickKey = <span class="string">"click"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIButton</span> (<span class="title">block</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Category中的属性，只会生成setter和getter方法，不会生成成员变量</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setClick:(clickBlock)click&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 产生关联,让某个对象(name)与当前对象的属性(name)产生关联</span></span><br><span class="line"><span class="comment">     参数1: id object :表示给哪个对象添加关联</span></span><br><span class="line"><span class="comment">     参数2: const void *key : 表示: id类型的key值(以后用这个key来获取属性) 属性名</span></span><br><span class="line"><span class="comment">     参数3: id value : 属性值</span></span><br><span class="line"><span class="comment">     参数4: 策略, 是个枚举(点进去,解释很详细)</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     单词Associated 关联</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, clickKey, click, OBJC_ASSOCIATION_COPY_NONATOMIC);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> removeTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonClick) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (click) &#123;</span><br><span class="line">        [<span class="keyword">self</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonClick) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (clickBlock)click&#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, clickKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)buttonClick&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.click) &#123;</span><br><span class="line">        <span class="keyword">self</span>.click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>这样，我们就成功的给UIButton类添加了一个监听单击事件的block属性</p>
<p>使用：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UIButton *<span class="keyword">button </span>= [[UIButton alloc] init]<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">button.frame </span>= self.view.<span class="keyword">bounds;</span></span><br><span class="line"><span class="keyword"> </span>   </span><br><span class="line">[self.view <span class="keyword">addSubview:button];</span></span><br><span class="line"><span class="keyword"> </span>   </span><br><span class="line"><span class="keyword">button.click </span>= ^&#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@<span class="string">"点击了button"</span>)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><p>为什么我们会用runtime方法来给系统的类动态添加属性? 直接在分类的.m文件中定义一个全局的<code>clickBlockXP _clickXp;</code>也可以达到相同的效果，为什么不能那样做呢</p>
<p>就像这样：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"UIButton+block.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^clickBlockXP)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 定义的全局block */</span></span><br><span class="line">clickBlockXP _clickXp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIButton</span> (<span class="title">block</span>)</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setClick:(clickBlock)click&#123;</span><br><span class="line">    </span><br><span class="line">    _clickXp = click;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> removeTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonClick) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (click) &#123;</span><br><span class="line">        [<span class="keyword">self</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonClick) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (clickBlock)click&#123;</span><br><span class="line">    <span class="keyword">return</span> _clickXp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)buttonClick&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.click) &#123;</span><br><span class="line">        <span class="keyword">self</span>.click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不能这样做的原因</strong>：属性保存的地址不同，如果使用疑难杂症中所述的那样，虽然可以达到效果，但是当button销毁了，button.click并不会随着它的销毁而销毁，这样就不是关联关系了，所以这时候就需要使用到runtime，那么就需要将某个属性保存到它的对象里，给哪个对象添加属性，就将之保存到谁里面。属性和对象共存亡。</p>
<h3 id="文章链接"><a href="#文章链接" class="headerlink" title="文章链接"></a>文章链接</h3><p><a href="https://xiaopengmonsters.github.io/2017/02/14/Runtime/" target="_blank" rel="noopener">Runtime和消息转发</a></p>
<p><a href="https://xiaopengmonsters.github.io/2017/02/21/Runtime%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">Runtime之动态添加方法</a></p>
<p><a href="http://www.cocoachina.com/ios/20160523/16386.html" target="_blank" rel="noopener">Runtime全方位装逼指南</a></p>
<p><a href="https://www.jianshu.com/p/e52c17db0aa9" target="_blank" rel="noopener">runtime简单使用之动态添加属性</a></p>
]]></content>
      
        <categories>
            
            <category> 原理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C </tag>
            
            <tag> Runtime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Runtime和消息转发]]></title>
      <url>/2017/02/14/Runtime/</url>
      <content type="html"><![CDATA[<h1 id="什么是Runtime"><a href="#什么是Runtime" class="headerlink" title="什么是Runtime"></a>什么是Runtime</h1><ul>
<li>Runtime简称运行时。OC就是运行时机制，其中最主要的是<code>消息机制</code>。</li>
<li>对于C语言，函数的调用在编译的时候会决定调用哪个函数。</li>
<li>对于OC的函数，属于动态调用过程，在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。</li>
<li>Runtime基本上是用C汇编写的，这个库使得C语言有了面向对象的能力。</li>
</ul>
<h2 id="消息机制（方法调用的本质）"><a href="#消息机制（方法调用的本质）" class="headerlink" title="消息机制（方法调用的本质）"></a>消息机制（方法调用的本质）</h2><ul>
<li>方法调用的本质，就是让对象发送消息。</li>
<li>OC中所有方法的调用都会转化为objc_msgSend来实现。</li>
</ul>
<h3 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h3><p>其定义如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_selector</span> *<span class="title">SEL</span>；</span></span><br></pre></td></tr></table></figure>
<p>SEL又叫选择器，类成员方法的指针，但不同于C语言中的函数指针，函数指针直接保存了方法的地址，但SEL只是方法编号。</p>
<h3 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h3><p>IMP实际上是一个函数指针，指向方法实现的地址。<br>其定义如下:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id (<span class="name">*IMP</span>)(<span class="name">id</span>, SEL,...)</span><br></pre></td></tr></table></figure>
<p>第一个参数：是指向self的指针(如果是实例方法，则是类实例的内存地址；如果是类方法，则是指向元类的指针)</p>
<p>第二个参数：是方法选择器(selector)</p>
<p>接下来的参数：方法的参数列表。</p>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>Method方法的结构体，其中保存了方法的名字，实现和类型描述字符串，则定义如下：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_method *<span class="function"><span class="keyword">Method</span></span></span><br><span class="line"><span class="function">    <span class="title">struct</span> <span class="title">objc_method</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        SEL method_name      OBJC2_UNAVAILABLE; // 方法名</span></span></span><br><span class="line"><span class="function"><span class="comment">        char *method_types   OBJC2_UNAVAILABLE;</span></span></span><br><span class="line"><span class="function"><span class="comment">        IMP method_imp       OBJC2_UNAVAILABLE; // 方法实现</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span></span></span><br></pre></td></tr></table></figure>
<p>可以看到该结构体中包含一个SEL和IMP，实际上相当于在SEL和IMP之间作了一个映射。有了SEL，我们便可以找到对应的IMP，从而调用方法的实现代码。</p>
<p><strong>原理：对象根据方法编号SEL去Dispath table表（映射表）寻找到对应的IMP，IMP就是一个函数指针，然后执行这个方法</strong></p>
<p><img src="/img/消息机制.png" alt=""></p>
<p>下面演示了这样一个消息的基本框架：<br>当消息发送给一个对象时首先从运行时系统缓存使用过的方法中寻找。<br>如果找到，执行该方法,如未找到继续执行下面的步骤</p>
<p>objc_msgSend通过对象的isa指针获取到类的结构体，然后在方法分发表里面查找方法的selector。<br>如果没有找到selector，objc_msgSend结构体中的指向父类的指针找到其父类，并在父类的分发表里面查找方法的selector。<br>依此，会一直沿着类的继承体系到达NSObject类。一旦定位到selector，函数会就获取到了实现的入口点，并传入相应的参数来执行方法的具体实现,并将该方法添加进入缓存中如果最后没有定位到selector，则会走消息转发流程。 </p>
<h2 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h2><h3 id="1、动态方法解析"><a href="#1、动态方法解析" class="headerlink" title="1、动态方法解析"></a>1、动态方法解析</h3><p>如果在上述索引未能成功，则首先会转入动态方法解析，该过程允许我们使用<code>class_addMethod</code>函数动态提供相对于的方法实现</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 如果调用的是实例方法，则会调用该方法 */</span></span><br><span class="line">+ (<span class="selector-tag">BOOL</span>)<span class="selector-tag">resolveInstanceMethod</span><span class="selector-pseudo">:(SEL)sel</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 如果调用的是类方法，则会调用该方法 */</span></span><br><span class="line">+ (<span class="selector-tag">BOOL</span>)<span class="selector-tag">resolveClassMethod</span><span class="selector-pseudo">:(SEL)sel</span>;</span><br></pre></td></tr></table></figure>
<p>下面举一个例子：</p>
<ol>
<li>创建了一个Animal类的对象an，然后调用an的eat方法，注意，这个eat方法是没有实现的</li>
<li>进入Animal类的.m文件，我们实现了resolveInstanceMethod这个方法为我的Animal类动态增加了一个eat方法的实现。（<a href="https://xiaopengmonsters.github.io/2017/02/21/Runtime%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">这里</a>会详细讲解Runtime动态添加方法）</li>
</ol>
<p>当外部调用[an eat]时，由于我们没有实现eat对应的方法，那么系统会调用resolveInstanceMethod让你去做一些其他操作。（也可以不做操作，如果不操作会进入下一步消息转发，在这个例子中，我为Animal方法动态增加了实现。）</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">void</span> <span class="selector-tag">eat</span>(id self, SEL _cmd, NSString *string)&#123;</span><br><span class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"add C IMP %@"</span>, string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (BOOL)<span class="selector-tag">resolveInstanceMethod</span><span class="selector-pseudo">:(SEL)sel</span>&#123;</span><br><span class="line">    <span class="selector-tag">if</span> (sel == <span class="variable">@selector</span>(eat)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">class_addMethod</span>(self, sel, (IMP) eat, <span class="string">"v@:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-attr">[super resolveInstanceMethod:sel]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、消息转发"><a href="#2、消息转发" class="headerlink" title="2、消息转发"></a>2、消息转发</h3><ul>
<li>如果不对上面的<code>resolveInstanceMethod</code>方法做任何处理，直接调用父类方法，那么，系统会来到了<code>forwardingTargetForSelector</code>方法</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 这个方法返回你需要转发消息的对象 */</span></span><br><span class="line"><span class="selector-tag">-</span> (id)<span class="selector-tag">forwardingTargetForSelector</span><span class="selector-pseudo">:(SEL)aSelector</span>;</span><br></pre></td></tr></table></figure>
<p>接着上面的例子：</p>
<ol>
<li>不对<code>resolveInstanceMethod</code>进行处理，直接调用父类方法。</li>
<li>新建了一个熊猫类Panda，并且实现了Panda的eat方法。</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)<span class="string">resolveInstanceMethod:</span>(SEL)sel&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> <span class="string">resolveInstanceMethod:</span>sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)<span class="string">forwardingTargetForSelector:</span>(SEL)aSelector;&#123;</span><br><span class="line">    <span class="keyword">return</span> [[Panda alloc]init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当程序来到<code>forwardingTargetForSelector</code>方法时，我们现在返回一个Panda类的实例对象，继续运行，程序就来到了Panda类的eat方法，这样，就实现了消息转发。</p>
<ul>
<li>如果<code>forwardingTargetForSelector</code>方法也不实现的话，那么程序会进入下面两个函数</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 这个方法是用来生成方法签名的，这个签名就是给forwardInvocation中的参数NSInvocation调用的 */</span></span><br><span class="line"><span class="selector-tag">-</span> (NSMethodSignature *)<span class="selector-tag">methodSignatureForSelector</span><span class="selector-pseudo">:(SEL)aSelector</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 在这个方法中用你要转发的那个对象调用这个对应的签名 */</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">forwardInvocation</span><span class="selector-pseudo">:(NSInvocation</span> *)<span class="selector-tag">anInvocation</span>;</span><br></pre></td></tr></table></figure>
<p>unrecognized selector sent to instance这个错误的原因，就是因为<code>methodSignatureForSelector</code>这个方法中，由于没有找到eat对应的实现方法，所以返回了一个空的方法签名，最终导致程序报错崩溃。</p>
<p>所以我们需要做的是自己新建方法签名，再在<code>forwardInvocation</code>中用你要转发的那个对象调用这个对应的签名，这样也实现了消息转发。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *sel = <span class="built_in">NSStringFromSelector</span>(aSelector);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([sel isEqualToString:<span class="string">@"eat"</span>]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/** 为你的转发发放手动生成签名 */</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSMethodSignature</span> signatureWithObjCTypes:<span class="string">"v@:"</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation&#123;</span><br><span class="line">    </span><br><span class="line">    SEL selector = [anInvocation selector];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 新建需要转发消息的对象 */</span></span><br><span class="line">    Panda *panda = [[Panda alloc]init];</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> ([panda respondsToSelector:selector]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/** 唤醒这个方法 */</span></span><br><span class="line">        [anInvocation invokeWithTarget:panda];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Runtime文章链接"><a href="#Runtime文章链接" class="headerlink" title="Runtime文章链接"></a>Runtime文章链接</h3><p><a href="https://xiaopengmonsters.github.io/2017/02/20/Runtime%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">Runtime之动态添加属性</a></p>
<p><a href="https://xiaopengmonsters.github.io/2017/02/21/Runtime%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">Runtime之动态添加方法</a></p>
]]></content>
      
        <categories>
            
            <category> 原理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C </tag>
            
            <tag> Runtime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LLDB]]></title>
      <url>/2017/01/05/LLDB/</url>
      <content type="html"><![CDATA[<p>阿萨德</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CAlayer]]></title>
      <url>/2016/12/18/CAlayer/</url>
      <content type="html"><![CDATA[<p>主要从以下几个方面了解CAlayer：</p>
<ol>
<li>CALayer和UIView的关系</li>
<li>CALayer的基本属性</li>
<li>position和anchorPoint的作用</li>
<li>CALayer和UIView的选择</li>
<li>CALayer所属框架</li>
<li>CALayer的隐式动画</li>
<li>自定义图层</li>
</ol>
<p>在平时开发中，我们经常使用到<code>UILable</code>、<code>UIButton</code>、<code>UIImageView</code>、<code>UITextField</code>等都是UIView的子类（可以去了解一下UIKit框架），UIView之所以能显示在屏幕上，完全是因为它内部的一个图层。</p>
<p>这里有<a href="https://upload-images.jianshu.io/upload_images/1829339-9089f59e204212d2" target="_blank" rel="noopener">UIKit框架结构图</a>，此图来自简书@不懂技术的爱迪生。</p>
<p>这个图层就是CALayer，它并不属于UIKit框架，后面会讲到。其实UIView本身不具备显示的功能，是它内部的层才有显示功能。</p>
<p>当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示。</p>
<h1 id="CALayer和UIView的关系"><a href="#CALayer和UIView的关系" class="headerlink" title="CALayer和UIView的关系"></a>CALayer和UIView的关系</h1><ul>
<li>在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">retain</span>) CALayer *layer;</span><br></pre></td></tr></table></figure>
<ul>
<li>CALayer的基本属性</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">宽度和高度</span><br><span class="line">@property CGRect bounds;</span><br><span class="line"></span><br><span class="line">位置(默认指中点，具体由anchorPoint决定)</span><br><span class="line">@property CGPoint position;</span><br><span class="line"></span><br><span class="line">锚点(x,y的范围都是0-1)，决定了position的含义</span><br><span class="line">@property CGPoint anchorPoint;</span><br><span class="line"></span><br><span class="line">背景颜色(CGColorRef类型)</span><br><span class="line">@property CGColorRef backgroundColor;</span><br><span class="line"></span><br><span class="line">形变属性</span><br><span class="line">@property CATransform3D transform;</span><br><span class="line"></span><br><span class="line">让图片显示固定区域(比如可以让一个图片只显示上半部分或者下半部分甚至更小)</span><br><span class="line">@property CGRect contentsRect;</span><br><span class="line"></span><br><span class="line">边框颜色(CGColorRef类型)</span><br><span class="line">@property CGColorRef borderColor;</span><br><span class="line"></span><br><span class="line">边框宽度</span><br><span class="line">@property CGFloat borderWidth;</span><br><span class="line"></span><br><span class="line">圆角半径</span><br><span class="line">@property CGFloat cornerRadius;</span><br><span class="line"></span><br><span class="line">内容(比如设置为图片CGImageRef)</span><br><span class="line">@property(retain) id contents;</span><br></pre></td></tr></table></figure>
<ul>
<li>CALayer的阴影属性</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">阴影颜色</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>CGColorRef shadowColor;</span><br><span class="line"> </span><br><span class="line">阴影不透明(<span class="number">0.0</span> ~ <span class="number">1.0</span>)</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>float shadowOpacity;</span><br><span class="line"> </span><br><span class="line">阴影偏移位置</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>CGSize shadowOffset;</span><br></pre></td></tr></table></figure>
<ul>
<li>CALayer的使用时的问题（存在的疑惑）</li>
</ul>
<p>首先，CALayer是定义在QuartzCore框架中的(Core Animation)<br>CGImageRef、CGColorRef两种数据类型是定义在CoreGraphics框架中的，UIColor、UIImage是定义在UIKit框架中的</p>
<p>其次，QuartzCore框架和CoreGraphics框架是可以跨平台使用的，在iOS和Mac OS X上都能使用，但是UIKit只能在iOS中使用。</p>
<p>为了保证可移植性，QuartzCore不能使用UIImage、UIColor，只能使用CGImageRef、CGColorRef。</p>
<h2 id="CALayer的position和anchorPoint"><a href="#CALayer的position和anchorPoint" class="headerlink" title="CALayer的position和anchorPoint"></a>CALayer的position和anchorPoint</h2><p> position和anchorPoint是CALayer非常重要的2个属性</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>CGPoint position;</span><br></pre></td></tr></table></figure>
<ul>
<li>position:它是用来设置当前的layer在父控件当中的位置的,<br>所以它的坐标原点.以父控件的左上角为(0.0)点.</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property CGPoint <span class="built_in">anchor</span>Point;</span><br></pre></td></tr></table></figure>
<ul>
<li>anchorPoint称为“定位点”、“锚点”<br>决定着CALayer身上的哪个点会在position属性所指的位置，以自己的左上角为原点(0, 0)，它的x、y取值范围都是0~1，默认值为（0.5, 0.5），意味着锚点在layer的中间.</li>
</ul>
<h1 id="UIView和CALayer的选择"><a href="#UIView和CALayer的选择" class="headerlink" title="UIView和CALayer的选择"></a>UIView和CALayer的选择</h1><p>通过CALayer，就能做出跟UIView一样的界面效果</p>
<p>但是，对比CALayer，UIView多了一个事件处理的功能。也就是说，CALayer不能处理用户的触摸事件，而UIView可以，<br>所以，如果显示出来的东西需要跟用户进行交互的话，用UIView；如果不需要跟用户进行交互，用UIView或者CALayer都可以。<br>当然，CALayer的性能会高一些，因为它少了事件处理的功能，更加轻量级。</p>
<p>那么，从实质来讲，UIView仅仅是对CALayer的一层封装，实现了CALayer的delegate，提供了处理事件交互的具体功能，还有动画底层方法的高级API。可以说CALayer是UIView的内部实现细节。</p>
<h1 id="隐式动画"><a href="#隐式动画" class="headerlink" title="隐式动画"></a>隐式动画</h1><p>先了解是什么根层和非根层.</p>
<ul>
<li>根层:UIView内部自动关联着的那个layer我们称它是根层</li>
<li>非根层:自己手动创建的层,称为非根层</li>
</ul>
<p>什么是隐式动画？</p>
<ul>
<li>隐式动画就是当对非根层的部分属性(bounds、backgroundColor、position等)进行修改时, 它会自动的产生一些动画的效果.<br>我们称这个默认产生的动画为隐式动画.</li>
</ul>
<p>关闭隐式动画效果</p>
<ul>
<li>首先要了解动画底层是怎么做的.动画的底层是包装成一个事务来进行的.</li>
<li>什么是事务?<br>很多操作绑定在一起,当这些操作执行完毕后,才去执行下一个操作.</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">[<span class="built_in">CATransaction</span> begin];</span><br><span class="line"></span><br><span class="line">设置事务没有动画</span><br><span class="line">[<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">NO</span>];</span><br><span class="line"></span><br><span class="line">设置隐式动画执行的时长</span><br><span class="line">[<span class="built_in">CATransaction</span> setAnimationDuration:<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">提交事务</span><br><span class="line">[<span class="built_in">CATransaction</span> commit];</span><br></pre></td></tr></table></figure>
<h1 id="自定义图层"><a href="#自定义图层" class="headerlink" title="自定义图层"></a>自定义图层</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="方法描述："><a href="#方法描述：" class="headerlink" title="方法描述："></a>方法描述：</h3><p>设置CALayer的delegate，然后让delegate实现drawLayer:inContext:方法，当CALayer需要绘图时，会调用delegate的drawLayer:inContext:方法进行绘图。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建图层</span></span><br><span class="line"><span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</span><br><span class="line"><span class="comment">// 设置delegate  设置了CALayer的delegate，这里的self是指控制器</span></span><br><span class="line"></span><br><span class="line">layer.delegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置层的宽高</span></span><br><span class="line">layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置层的位置</span></span><br><span class="line">layer.position = <span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始绘制图层 需要调用setNeedsDisplay这个方法，才会通知delegate进行绘图</span></span><br><span class="line">[layer setNeedsDisplay];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将图层添加到view的根层上</span></span><br><span class="line">[<span class="keyword">self</span>.view.layer addSublayer:layer];</span><br></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pragma</span> <span class="selector-tag">mark</span> 画一个矩形框</span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">drawLayer</span><span class="selector-pseudo">:(CALayer</span> *)<span class="selector-tag">layer</span> <span class="selector-tag">inContext</span><span class="selector-pseudo">:(CGContextRef)ctx</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置蓝色</span></span><br><span class="line">    <span class="selector-tag">CGContextSetRGBStrokeColor</span>(ctx, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置边框宽度</span></span><br><span class="line">    <span class="selector-tag">CGContextSetLineWidth</span>(ctx, <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加一个跟层一样大的矩形到路径中</span></span><br><span class="line">    <span class="selector-tag">CGContextAddRect</span>(ctx, layer.bounds);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绘制路径</span></span><br><span class="line">    <span class="selector-tag">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/img/五角星.png" alt=""></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="方法描述：-1"><a href="#方法描述：-1" class="headerlink" title="方法描述："></a>方法描述：</h3><ul>
<li>创建一个CALayer的子类，然后覆盖drawInContext:方法，使用Quartz2D API进行绘图</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建自定义图层类</span></span><br><span class="line">XPCALayer *layer = [XPCALayer layer];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置层的宽高</span></span><br><span class="line">layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置层的位置</span></span><br><span class="line">layer.position = <span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 设置图层颜色</span></span><br><span class="line">layer.backgroundColor = [<span class="built_in">UIColor</span> redColor].CGColor;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 开始绘制图层  需要调用setNeedsDisplay这个方法，才会触发drawInContext:方法的调用，然后进行绘图</span></span><br><span class="line">[layer setNeedsDisplay];</span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 将图层添加到view的根层上</span></span><br><span class="line">[<span class="keyword">self</span>.view.layer addSublayer:layer];</span><br></pre></td></tr></table></figure>
<ul>
<li>类内的实现，重写父类方法，绘制一个实心三角</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">drawInContext</span><span class="selector-pseudo">:(CGContextRef)ctx</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置为蓝色</span></span><br><span class="line">    <span class="selector-tag">CGContextSetRGBFillColor</span>(ctx, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置起点</span></span><br><span class="line">    <span class="selector-tag">CGContextMoveToPoint</span>(ctx, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从(50, 0)连线到(0, 100)</span></span><br><span class="line">    <span class="selector-tag">CGContextAddLineToPoint</span>(ctx, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从(0, 100)连线到(100, 100)</span></span><br><span class="line">    <span class="selector-tag">CGContextAddLineToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>/<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">CGContextAddLineToPoint</span>(ctx, <span class="number">0</span>, <span class="number">100</span>/<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">CGContextAddLineToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并路径，连接起点和终点</span></span><br><span class="line">    <span class="selector-tag">CGContextClosePath</span>(ctx);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绘制路径</span></span><br><span class="line">    <span class="selector-tag">CGContextFillPath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="/img/正方形.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="1-注意"><a href="#1-注意" class="headerlink" title="1.注意"></a>1.注意</h3><ul>
<li>无论采取哪种方法来自定义层，都必须调用CALayer的setNeedsDisplay方法才能正常绘图。</li>
</ul>
<h3 id="2-UIView的详细显示过程"><a href="#2-UIView的详细显示过程" class="headerlink" title="2.UIView的详细显示过程"></a>2.UIView的详细显示过程</h3><ul>
<li>当UIView需要显示时，它内部的层会准备好一个CGContextRef(图形上下文)，然后调用delegate(这里就是UIView)的drawLayer:inContext:方法，并且传入已经准备好的CGContextRef对象。而UIView在drawLayer:inContext:方法中又会调用自己的drawRect:方法</li>
<li>平时在drawRect:中通过UIGraphicsGetCurrentContext()获取的就是由层传入的CGContextRef对象，在drawRect:中完成的所有绘图都会填入层的CGContextRef中，然后被拷贝至屏幕</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何清空view上的所有子视图]]></title>
      <url>/2016/12/03/%E5%A6%82%E4%BD%95%E6%B8%85%E7%A9%BAview%E4%B8%8A%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E8%A7%86%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>本文以删除view上的所有子视图为例，重点讲的是NSSet和NSArray的makeObjectsPerformSelector方法和enumerator方法</p>
<h2 id="removeFromSuperview方法"><a href="#removeFromSuperview方法" class="headerlink" title="removeFromSuperview方法"></a>removeFromSuperview方法</h2><p>首先来看看常用的removeFromSuperview方法，下面是苹果官方定义：</p>
<ul>
<li>Unlinks the receiver from its superview and its window,<br>and removes it from the responder chain.</li>
</ul>
<ul>
<li>译： 把接收者（当前view）从它的父视图移除，并删除它的响应链。 </li>
</ul>
<p>调用removeFromSuperview方法会将当前视图从其父视图移除。（注意：只是将自己从俯视图移除，以前总是误以为将自己所有自视图从俯视图移除）所以用for…in…的方法，取到每一个subview，让他们执行removeFromSuperView就可以达到效果</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (UIView *<span class="built_in">view</span> <span class="keyword">in</span> [self.<span class="built_in">view</span> subviews]) &#123;</span><br><span class="line"></span><br><span class="line">        [<span class="built_in">view</span> removeFromSuperview];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p> 注意：</p>
<ol>
<li>永远不要在你的view的drawRect方法中调用removeFromSuperview；</li>
<li>removeFromSuperview的实质并不是将这个视图从内存中移除,而是将一个视图从他的父视图上删除。计算机删除的本质是，标记删除，当你删除一个东西的时候，系统只是将这块内存做了一个标记，表示目前无人使用，但是之前视图的内存地址存在。所以如果想让视图不存在，需要在移除之后置为nil。</li>
</ol>
<h2 id="makeObjectsPerformSelector"><a href="#makeObjectsPerformSelector" class="headerlink" title="makeObjectsPerformSelector"></a>makeObjectsPerformSelector</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(void)</span>makeObjectsPerformSelector:<span class="params">(SEL)</span>aSelector;  </span><br><span class="line">- <span class="params">(void)</span>makeObjectsPerformSelector:<span class="params">(SEL)</span>aSelector withObject:<span class="params">(id)</span>argument;</span><br></pre></td></tr></table></figure>
<p>介绍：让数组中的每个元素 都调用 aSelector  并把 withObject 后边的 argument 对象做为参数传给方法aSelector</p>
<p>一行搞定删除子视图</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">self.view.sublayers</span> makeObjectsPerformSelector:@selector(<span class="name">removeFromSuperview</span>)]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>带参数方法的使用：如果一个数组arry中存储了一组有hidden属性的对象（假设为view），需要将数组里所有对象的hide全部赋值为真，就可以这么写：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[arry <span class="string">makeObjectsPerformSelector:</span><span class="meta">@selector</span>(<span class="string">setHidden:</span>) <span class="string">withObject:</span><span class="meta">@YES</span>];</span><br></pre></td></tr></table></figure>
<p>这么写就相当于arry数组里面的每一个对象都调用了setHidden方法，并且参数为YES，不用再遍历，一行代码搞定，是不是很方便。</p>
<p>但是若想设置为NO的话，则无效（亲测）。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[arry <span class="string">makeObjectsPerformSelector:</span><span class="meta">@selector</span>(<span class="string">setHidden:</span>) <span class="string">withObject:</span><span class="meta">@NO</span>];</span><br></pre></td></tr></table></figure>
<p>这是因为YES和NO都为BOOL类型，设置为YES时，传递的为非0的指针，所以会设置 view.hidden = YES，但若设置为NO时，传递的仍为非0的指针，所以执行的结果仍是 view.hidden = YES。具体可看<a href="https://www.cnblogs.com/Apologize/p/5383652.html" target="_blank" rel="noopener">这里</a>。</p>
<p>但是可以用nil达到参数为NO的效果</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[arry <span class="string">makeObjectsPerformSelector:</span><span class="meta">@selector</span>(<span class="string">setHidden:</span>) <span class="string">withObject:</span>nil];</span><br></pre></td></tr></table></figure>
<h2 id="enumerator"><a href="#enumerator" class="headerlink" title="enumerator"></a>enumerator</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">enumerateObjectsUsingBlock:</span>block;</span><br></pre></td></tr></table></figure>
<p>这个方法也是遍历数组，block里面的参数包括obj（运行的对象）、idx（下标）、stop（是否继续遍历的标志），<em>stop可以控制遍历何时停止，在需要停止时令</em>stop = YES即可（不要忘记前面的**），应该说，这个能满足基本所有的遍历需求了，有下标，有运行的对象，还有是否继续遍历的标志。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *xpArray = @[<span class="string">@"A"</span>, <span class="string">@"B"</span>, <span class="string">@"C"</span>, <span class="string">@"D"</span>, <span class="string">@"E"</span>];</span><br><span class="line">    </span><br><span class="line">    [xpArray enumerateObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, obj);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([obj isEqualToString:<span class="string">@"C"</span>]) &#123;</span><br><span class="line">            </span><br><span class="line">            *stop = <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<p>不过反向遍历呢？苹果提供了另外一个方法：</p>
<figure class="highlight hy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[xpArray enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(<span class="name"><span class="builtin-name">id</span></span> obj, NSUInteger idx, BOOLBOOL *stop) &#123;  </span><br><span class="line">    NSLog(@<span class="string">"idx=%d, id=%@"</span>, idx, obj)<span class="comment">;  </span></span><br><span class="line">&#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这个enumerateObjectsWithOptions:usingBlock:方法比前面那个方法多了一个枚举类型的参数NSEnumerationReverse，这个参数指定了遍历的顺序。</p>
<p>注意：这里要补充一点，这个方法是可以修改块签名，当我们已经明确集合中的元素类型时，可以把默认的签名id类型修改成已知类型，比如常见的NSString，这样既可以节省系统资源开销，也可以防止误向对象发送不存在的方法是引起的崩溃。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/12/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
